plugins {
    id 'de.gliderpilot.semantic-release' version '1.4.0'
    id 'org.ajoberstar.github-pages' version '1.7.2'
    id 'org.asciidoctor.convert' version '1.5.6'
    id 'com.github.jruby-gradle.base' version '1.5.0'
}

apply plugin: 'org.asciidoctor.convert'

def setExtValue(String property, String systemenv) {
    project.ext."$property" = project.hasProperty(property) ? project.getProperty(property) : System.getenv(systemenv)
}
setExtValue('ghToken', 'GH_TOKEN')

ext {
    revealjsVersion = '3.6.0'
    asciidoctorBackendVersion = '1.1.3'
    downloadDir = new File(buildDir,'download')
    htmlOutputDir = file("${buildDir}/asciidoc/revealjs/")
}

repositories {
    jcenter()
    ivy {
        name = "github"
        url = "https://github.com/"
        layout("pattern") {
            artifact "[organization]/[artifact]/archive/[revision].[ext]"
        }
    }
    ivy {
        name = "github-with-v"
        url = "https://github.com/"
        layout("pattern") {
            artifact "[organization]/[artifact]/archive/v[revision].[ext]"
        }
    }
}

configurations {
    asciidoctorBackend
    revealjs
    pdf
}

dependencies {
    pdf 'me.champeau.deck2pdf:deck2pdf:0.3.0'
    asciidoctorBackend "asciidoctor:asciidoctor-reveal.js:$asciidoctorBackendVersion@zip"
    revealjs "hakimel:reveal.js:$revealjsVersion@zip"
}

task configureDownload {
    doLast {
        tasks.download.from zipTree(configurations.asciidoctorBackend.singleFile)
        tasks.download.from zipTree(configurations.revealjs.singleFile)
    }
}

task download(type: Sync) {
    dependsOn configureDownload
    into downloadDir
}

asciidoctorj {
  version = '1.5.6'
}

asciidoctor {
    dependsOn download
    sourceDir 'src/slides'
    sources {
        include 'index.adoc'
    }
    resources {
        from (file('src')) {
            include 'images/**'
        }
        from (new File(downloadDir, "reveal.js-$revealjsVersion")) {
            include '**'
            into "/reveal.js"
        }
        from(file('src/styles')) {
            include '*.css'
        }
    }
    backends 'revealjs'
    attributes \
        'source-highlighter': 'coderay',
        'toc': 'left',
        'icons': 'font',
        'setanchors': '',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': '',
        customcss: 'tschulte.css',
        'revealjs_theme': 'white',
        'revealjs_transition': 'linear',
        'revealjs_history': 'true',
        'revealjs_slideNumber': 'true'
    options template_dirs: [new File(downloadDir, "asciidoctor-reveal.js-$asciidoctorBackendVersion/templates").absolutePath]
}

task pdf(type: JavaExec) {
    def outputFile = file("$buildDir/distributions/${project.name}-${project.version}.pdf")
    inputs.files tasks.asciidoctor
    outputs.file outputFile
    classpath = configurations.pdf
    main = "me.champeau.deck2pdf.Main"
    args \
        "--fontsdir=${htmlOutputDir}/reveal.js/lib/font/source-sans-pro",
        "--width=1920",
        "--height=1200",
        "--profile=revealjs",
        "$htmlOutputDir/index.html",
        outputFile
    doFirst {
        outputFile.parentFile.mkdirs()
    }
}

githubPages {
    // branch will be created if it doesn't exist
    targetBranch = 'gh-pages'

    // what to publish, this is a standard CopySpec
    pages {
        from htmlOutputDir
    }
    // message used when committing changes
    commitMessage = 'Publishing a version of the presentation' // defaults to 'Generated by gradle-git-publish'
}

task asciidoctorZip(type: Zip) {
    from htmlOutputDir
}
artifacts {
    asciidoctorZip
    pdf
}

tasks.release {
    dependsOn asciidoctor
    finalizedBy publishGhPages
}

semanticRelease {
    repo {
        ghToken = project.ext.ghToken
        releaseAsset asciidoctorZip, label: 'the reveal.js presentation', contentType: 'application/zip'
        releaseAsset pdf.outputs.files.singleFile, builtBy: pdf, label: 'the PDF of the presentation', contentType: 'application/pdf'
    }
}
